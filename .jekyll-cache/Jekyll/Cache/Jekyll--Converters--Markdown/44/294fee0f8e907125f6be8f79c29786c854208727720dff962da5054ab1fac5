I" H<p><img src="./assets/images/multiCycl.gif" alt="Animation" /></p>

<blockquote>
  <p><strong>DISCLAIMER:</strong> The <a href="#tracing-a-cycloid">‚ÄúAnimate a Cycloid‚Äù</a> topic is developed step by step. There is a some repeatation of large code blocks. So it may seems to be lengthy but it is actually not!</p>
</blockquote>

<center> <h2> Table of Contents </h2> </center>

<table>
  <thead>
    <tr>
      <th style="text-align: left"><a href="#"><strong>Simple Animation</strong></a></th>
      <th style="text-align: center"><a href="./eom.html"><strong>Animate simple physical system From numerical solution</strong></a></th>
      <th style="text-align: center"><a href="(./eom1.html)"><strong>Animate using Data file</strong></a></th>
      <th style="text-align: center"><a href="./conclusion.html"><strong>Conclusion</strong></a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><a href="#introduction">1. Introduction</a></td>
      <td style="text-align: center"><a href="./eom.html#problem-statement">Problem Statement</a></td>
      <td style="text-align: center"><a href="./eom1.html#introduction">Introdution</a></td>
      <td style="text-align: center"><a href="./conclusion.html#resources">Resources</a></td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#why-gnuplot">2. Why GNUPlot</a></td>
      <td style="text-align: center"><a href="./eom.html#working-equations">Working Equations</a></td>
      <td style="text-align: center"><a href="./eom1.html#">The ‚ÄúHello World!‚Äù</a></td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#the-final-goal">3. The Final Goal</a></td>
      <td style="text-align: center"><a href="./eom.html#few-remarks-on-function">Remarks on Function</a></td>
      <td style="text-align: center"><a href="./eom1.html#">Working EQUATIONS</a></td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#scripted-gnuplot">4. Scripted GNUPlot</a></td>
      <td style="text-align: center"><a href="./eom.html#wrapping-up-the-final-code">The Final Code</a></td>
      <td style="text-align: center"><a href="./eom1.html#">Phase Space</a></td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#your-first-animation---the-hello-world">4.1. The ‚ÄòHello world!‚Äô</a></td>
      <td style="text-align: center"><a href="./eom.html#appendix-1---derivation-of-lagrangian-hamiltonian-and-eom-for-the-system">Appendix-I(Derivations)</a></td>
      <td style="text-align: center"><a href="./eom1.html#">Kapitza Pendulum</a></td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#tracing-a-cycloid">5. Animate a Cycloid</a></td>
      <td style="text-align: center"><a href="./eom.html#appendix-2---rk-4-method">Appendix-II(RK-4)</a></td>
      <td style="text-align: center"><a href="./eom1.html#">Configuration Space</a></td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#the-final-script">5.1. Final script for the Cycloid</a></td>
      <td style="text-align: center"><a href="./eom1.html#">Appendix-I(Derivations)</a></td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#be-an-active-learner">6. Be an active learner</a></td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="#a-bonus-project">7. A Bonus Project</a></td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
      <td style="text-align: center">¬†</td>
    </tr>
  </tbody>
</table>

<h1 id="introduction">Introduction</h1>

<p>Visualizing a system by plotting a graph is always of great interest for practising professionals in any stream. But the advancement of technology now allows us more than just plotting. Nowadays ‚ÄúJust plotting‚Äù is an old fashion. Either it is teaching or presenting an idea in front of the audience, or just for self-learning, it is always a good idea to animate the system somehow. Or you may just want to plot a time-varying graph. Here I‚Äôll discuss techniques and tricks for the same.</p>

<h2 id="why-gnuplot">Why GNUPlot</h2>

<p>GNUPlot is simple, elegant and great for <code class="language-plaintext highlighter-rouge">First and Fast</code> learning. Although there are several packages/software, some are too advanced, we will be using good old GNUPlot. My personal believe (fortunately, many people agree to that) is that if you can learn one such package, the skill is transferable. So you can go on learning as per your preference.</p>

<h2 id="the-final-goal">The Final Goal</h2>

<p>I believe, most of you is already equipped with Lagrangian and Hamiltonian formalism. So the idea is to show the technique to produce GIFs(Graphics Interchange Format) and then to show how to simulate a simple system when the Lagrangian(or Hamiltonian) of the system is given a priori. After the second half, the reader must be able to animate simple systems of their choice. In a later post, I‚Äôll also show how to do animation from a data file. That will give you a wing to use GNUPlot with any other programming language. Although GNUPlot terminal can be linked to other programming languages, let‚Äôs don‚Äôt make thing complicated with that technical jargon. Now it‚Äôs enough of hunky-junky. Let‚Äôs get into the topic with the so-called ‚Äòhello-world GNUPlot script for the animation.</p>

<h1 id="scripted-gnuplot">Scripted GNUPlot</h1>

<p>Unlike writing command directly in the terminal, we can create a simple text file listing all the commands. Save it with an extension ‚Äò.gnu‚Äô(say, cos.gnu). Then from the terminal just type <code class="language-plaintext highlighter-rouge">gnuplot cos.gnu</code> and hit <code class="language-plaintext highlighter-rouge">Enter</code>. The file may contain the following</p>
<pre><code class="language-gnuplot">reset
set term qt
set xrange[-2*pi:2*pi]
set yrange[-1.5:1.5]
plot cos(x)
reread #optional
</code></pre>
<blockquote>
  <p>Sometimes it is convenient to put the <code class="language-plaintext highlighter-rouge">reread</code> statement at the end line. It‚Äôll keep the plotting window open. For some system, it may not be required for ordinary plotting. However, if you‚Äôre using <code class="language-plaintext highlighter-rouge">reread</code>, then keep in your mind that closing the plot window will not do the job, it‚Äôll pop up again. Rather you would like to execute <code class="language-plaintext highlighter-rouge">Ctrl+C</code> in the terminal to stop the execution and close the plotting window.
*Alternativel, for static plots, one may use <code class="language-plaintext highlighter-rouge">--persists</code> argument in the command line, like <code class="language-plaintext highlighter-rouge">gnuplot cos.gnu --persists</code></p>
</blockquote>

<p>Now let‚Äôs have a train of sine wave</p>

<h2 id="your-first-animation---the-hello-world">Your First Animation - The ‚ÄòHello world!‚Äô</h2>

<p><img src="./assets/images/sinetrain.gif" alt="sinetrain" /></p>

<pre><code class="language-gnuplot">reset
set term qt
set nokey #Optional
set title 'Sine wave train'
set xrange[-2*pi:2*pi]
set yrange[-1.5:1.5]
func(x, w, t) = sin(x + w*t)
do for[loopNo=1:100]{
    plot func(x, 0.5, loopNo)
}
reread
</code></pre>
<blockquote>
  <p>Output in your screen is too fast, isn‚Äôt it? No problem we will fix it later. Have some patience! :P</p>
</blockquote>

<p><strong>Notice that we‚Äôve used the <code class="language-plaintext highlighter-rouge">plot</code> command within the loop. And that‚Äôs the trick, you‚Äôre just plotting the same thing over and over again for different instances(here loopNo) and you get the animation like output. There are various method to save this animation. We will discuss those from time to time in the various examples.</strong></p>

<h3 id="note">NOTE:</h3>
<ul>
  <li>Indentation of the code block is absolutely unnecessary to GNUPlot. It‚Äôs just for our own readability.</li>
  <li>Optionally, you can add a line <code class="language-plaintext highlighter-rouge">set nokey</code>(As I‚Äôve done in the above script). It‚Äôll disable legend.</li>
  <li>Here in the <code class="language-plaintext highlighter-rouge">plot</code> line one can directly use <code class="language-plaintext highlighter-rouge">plot sin(x + 0.5*i)</code>, but the notion of function will be useful in the next example, so I thought it‚Äôll be nice to introduce beforehand. In case you haven‚Äôt seen this before, it is just a black-box kind of thing, where you define the function with the specific arguments(in this case, x, w, t). Whenever required, you just call that function with the specific arguments. That‚Äôs it!</li>
</ul>

<p>Now, we‚Äôll look into a better picture, a better animation!</p>

<h2 id="tracing-a-cycloid">Tracing a Cycloid</h2>

<p><img src="/assets/images/cycloid.gif" alt="Cycloid" /></p>

<p>We will build this script step by step! In the end, we will see a stunning animated cycloid just like the above GIF.</p>

<h3 id="lets-get-started">Let‚Äôs get started</h3>

<p>The idea is to trace a particular point of a moving circle. So, first thing first. We will need a circle. For that, we will consider the parametric setup.</p>

<pre><code class="language-gnuplot">#setting up the enviorment

reset 
set term qt
set nokey

set paramteric

s= 4 # radius of the circle
plot s*cos(t), s*sin(t) 
# in the parametric enviorment, the parameter is predefined as 't' by GNUPlot itself

reread #you must be executing Ctrl+C in the terminal to stop the execution.
</code></pre>
<ul>
  <li>
    <p>You may see an elongated/squeezed circle in the output. You can get rid of this by scaling the size. But for that, you must specify the <code class="language-plaintext highlighter-rouge">xrange</code> and <code class="language-plaintext highlighter-rouge">yrange</code>. Then you can calculate the ratio. But if you‚Äôre lazy enough like me, you might want a better solution. The trick is to set the ratio to be -1. In that case, GNUPlot will do the job for you. So just add another line to the above script <code class="language-plaintext highlighter-rouge">set size ratio -1</code>.</p>
  </li>
  <li>Next we want that the circle must be moving. How we will do that? Well, one possible way is to move the centre and plot a circle for every instance. For that, let us define two functions. Namely <code class="language-plaintext highlighter-rouge">cirX</code> and <code class="language-plaintext highlighter-rouge">cirY</code> with three arguments, the ‚Äúintrinsic parameter‚Äù(that ‚Äòt‚Äô, you may change the variable for function since it‚Äôs a dummy one, there shouldn‚Äôt be a problem. I‚Äôll call it <code class="language-plaintext highlighter-rouge">par</code> here. ), the radius of the circle and the instances(loop number).
    <pre><code class="language-gnuplot">cirX(r, i, par) = r*i + r*cos(par)
# the term r*i is added due to the fact, as time passes, circle will be rotated by an angle 'i'(say),
# so the linear distance traveled by the circle is radius*angle(=r*i)

cirY(r, i, par)= r + r*sin(par) # Although we are not using 'i' here(since y co-ordinate of the centre is not changing), 
# so you may not want to mention it.
# The additional r term is because I wanted that the circle must be moving on the y=0 line. 
# If you are okay with the circle is moving along y=-r line, then you need not to add that term.
</code></pre>
  </li>
  <li>Okay fine, Now we need to trace a particular point on a circle. For that again we will define another set of two functions, <code class="language-plaintext highlighter-rouge">px(r, i)</code> and <code class="language-plaintext highlighter-rouge">py(r, i)</code>
    <pre><code class="language-gnuplot">px(r, i) = r*i + r*cos(i)
py(r, i) = r + r*sin(i)
# Here we haven't pass the generic parameter 'par', because we are concerned about a particular point only,
# which is located at an angle 'i'
</code></pre>
  </li>
  <li>What‚Äôs next? That old good trick, we will be plotting the circle for each instance. So here each instance means we will be changing the angle. Since the <code class="language-plaintext highlighter-rouge">sin</code> and <code class="language-plaintext highlighter-rouge">cos</code> are defined to take an angle in radians as the argument, we must convert the angle into radian. After plugging everything here discussed, we have the following script:
    <pre><code class="language-gnuplot"># setting up the enviorment
reset 
set term qt
set size ratio -1
set nokey
set xrange[-pi:7*pi] 
# set maximum range greater than 2*pi*r*number_of_rotation
  
set yrange[0:5] 
# must be grater than radius of circle
# If you do not want to uplift the cirY by the radius, 
# then you must extend the yrange to the negative axis.

set parametric
  
# setting up the function
cirX(r, i, par) = r*i + r*cos(par)
cirY(r, i, par)= r + r*sin(par)
px(r, i) = r*i + r*cos(i)
py(r, i) = r + r*sin(i)

# Defining the radius and coversion factor
s = 2
conv = pi/180
  
#multiplication by 2 emphasize the fact we will have 2 full rotation 
do for[deg=0:360*2]{

    rad = deg*conv
      
    # plotting the circle for each instances
      
    # If you haven't pass three argument, you must pass only s and t through cirY!
    # Here the 't' is really the 'intrinsic parameter of the GNUPlot
    plot cirX(s, rad, t), cirY(s, rad, t)

    # plot an arrow with nohead(actually the radius)
    # Notice that, we plot the arrow from s*rad (linear distance traversed by the circle.)
    set arrow 1 nohead from s*rad, s to px(s, rad), py(s,rad) lc rgb 'red'
      
    # The circle object is a point on a circle  
    set object 2 circle at px(s, rad), py(s, rad) fc rgb 'red' size 0.05 fs solid front
      
    # 1 and 2 number is the identifier of the arrow and the circle respectively 
}
reread
</code></pre>
    <p><img src="/assets/images/inter.gif" alt="output" /></p>
  </li>
</ul>

<p>If you inspect the output closely, the point is rotating anti-clockwise but the advancement of the circle in the positive direction. To change the direction, just subtract the angle by 2*pi from cirX and cirY function. Another point is that the rotation starts from the line y=radius line. I wanted to start the rotation from y=0, so I‚Äôll change the phase by pi/2.</p>

<h2 id="the-final-script">The Final Script</h2>

<blockquote>
  <p>Here we will set <code class="language-plaintext highlighter-rouge">gif animate</code> type terminal and an output file with a .gif extension. <code class="language-plaintext highlighter-rouge">gif animate</code> usually take a long time(strictly speaking, depends upon the computational complexity of the problem and the number of frame/instance you are producing) to produce the output file. So you may need to wait for a while.</p>
</blockquote>

<script src="https://gist.github.com/arabindo/3ebfe901af4472b1659c959beef92a43.js"></script>

<p>The output will be very much similar to the <a href="#tracing-a-cycloid">above</a> one. You may like to use this <a href="https://ezgif.com/" target="_blank">website</a> to speed up or reduce the size of GIF, or maybe you want to convert the GIF into a video!</p>

<h2 id="be-an-active-learner">Be an active learner</h2>

<blockquote>
  <p><strong>If you‚Äôre having any difficulty, you can always contact me. But it‚Äôll be better if you do comment below this post. Since community learning is the best thing that one can have!</strong></p>
</blockquote>

<blockquote>
  <p><strong>The only thing I‚Äôm asking in return, please share your feedback, either by email/social-media or comment here.</strong></p>
</blockquote>

<p><a href="./eom.html">Next Page</a></p>

<h2 id="a-bonus-project">A Bonus Project</h2>

<h4 id="are-you-wondering-how-to-have-an-animation-that-ive-used-at-the-top-of-this-page-okay-thats-a-project-for-you-you-can-test-your-understanding-by-plotting-that-animation-here-are-some-tipsor-you-can-develop-your-own-technique-its-your-choice-you-may-find-useful-for-this-problem">Are you wondering how to have an animation that I‚Äôve used at the top of this page? Okay, that‚Äôs a project for you! You can test your understanding by plotting that animation. Here are some tips(Or you can develop your own technique, it‚Äôs your choice) you may find useful for this problem:</h4>

<blockquote>
  <p>These tips may not seem to be clear unless you really start to work on the problem. Only then you‚Äôll understand what I‚Äôm talking about.</p>
</blockquote>

<ul>
  <li>GNUPlot support array type variable declaration. So you can define two arrays, one for colour and another for the different radius of two circles.
    <ul>
      <li>Another important point to note: while declaring an array for the colour combination, use Hexa code for the colour. There are plenty of websites where you can find the Hexa code for the different colours.</li>
    </ul>
  </li>
</ul>

<pre><code class="language-gnuplot">array array_name=[element1, element2, element3....]
</code></pre>
<p>To access the elements you may use array_name[index]. In GNUPlot the index starts from 1.</p>

<ul>
  <li>
    <p>You may want to use a nested loop while plotting different instances.</p>
  </li>
  <li>
    <p>THIS IS, MAYBE, OPTIONAL: If you‚Äôre using a nested loop, make sure you plot all the circles using a single <code class="language-plaintext highlighter-rouge">plot</code> command before you start an inner loop to plot the different radius vector and trajectory corresponding to those vectors. For my machine, GNUPlot was unable to take that huge load of plotting the circles from an inner loop. So I was generating an output with blinking circles.</p>
  </li>
  <li>
    <p>To keep the track of trajectory of the corresponding radius vectors, use the identifier in the following form: (angle+j)**j [Here j stands for different circles like 1, 2, 3- can be identified as the index of the inner loop] so that the identifier is varied widely for different objects. Then it‚Äôll be easier for GNUPlot to keep track of the various different object.</p>
  </li>
  <li>
    <p>Here I‚Äôve uploaded the <a href="./code.html#multCycl">solution</a> ;)</p>
  </li>
</ul>

<p><a href="./eom.html">Next Page</a></p>
:ET